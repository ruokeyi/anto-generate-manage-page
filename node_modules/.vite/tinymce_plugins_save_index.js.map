{
  "version": 3,
  "sources": ["../tinymce/plugins/save/plugin.js", "../tinymce/plugins/save/index.js", "dep:tinymce_plugins_save_index"],
  "sourcesContent": ["(function () {\nvar save = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.dom.DOMUtils');\n\n    var global$2 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var enableWhenDirty = function (editor) {\n      return editor.getParam('save_enablewhendirty', true);\n    };\n    var hasOnSaveCallback = function (editor) {\n      return !!editor.getParam('save_onsavecallback');\n    };\n    var hasOnCancelCallback = function (editor) {\n      return !!editor.getParam('save_oncancelcallback');\n    };\n    var Settings = {\n      enableWhenDirty: enableWhenDirty,\n      hasOnSaveCallback: hasOnSaveCallback,\n      hasOnCancelCallback: hasOnCancelCallback\n    };\n\n    var displayErrorMessage = function (editor, message) {\n      editor.notificationManager.open({\n        text: editor.translate(message),\n        type: 'error'\n      });\n    };\n    var save = function (editor) {\n      var formObj;\n      formObj = global$1.DOM.getParent(editor.id, 'form');\n      if (Settings.enableWhenDirty(editor) && !editor.isDirty()) {\n        return;\n      }\n      editor.save();\n      if (Settings.hasOnSaveCallback(editor)) {\n        editor.execCallback('save_onsavecallback', editor);\n        editor.nodeChanged();\n        return;\n      }\n      if (formObj) {\n        editor.setDirty(false);\n        if (!formObj.onsubmit || formObj.onsubmit()) {\n          if (typeof formObj.submit === 'function') {\n            formObj.submit();\n          } else {\n            displayErrorMessage(editor, 'Error: Form submit field collision.');\n          }\n        }\n        editor.nodeChanged();\n      } else {\n        displayErrorMessage(editor, 'Error: No form element found.');\n      }\n    };\n    var cancel = function (editor) {\n      var h = global$2.trim(editor.startContent);\n      if (Settings.hasOnCancelCallback(editor)) {\n        editor.execCallback('save_oncancelcallback', editor);\n        return;\n      }\n      editor.setContent(h);\n      editor.undoManager.clear();\n      editor.nodeChanged();\n    };\n    var Actions = {\n      save: save,\n      cancel: cancel\n    };\n\n    var register = function (editor) {\n      editor.addCommand('mceSave', function () {\n        Actions.save(editor);\n      });\n      editor.addCommand('mceCancel', function () {\n        Actions.cancel(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var stateToggle = function (editor) {\n      return function (e) {\n        var ctrl = e.control;\n        editor.on('nodeChange dirty', function () {\n          ctrl.disabled(Settings.enableWhenDirty(editor) && !editor.isDirty());\n        });\n      };\n    };\n    var register$1 = function (editor) {\n      editor.addButton('save', {\n        icon: 'save',\n        text: 'Save',\n        cmd: 'mceSave',\n        disabled: true,\n        onPostRender: stateToggle(editor)\n      });\n      editor.addButton('cancel', {\n        text: 'Cancel',\n        icon: false,\n        cmd: 'mceCancel',\n        disabled: true,\n        onPostRender: stateToggle(editor)\n      });\n      editor.addShortcut('Meta+S', '', 'mceSave');\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('save', function (editor) {\n      Buttons.register(editor);\n      Commands.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n", "// Exports the \"save\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/save')\n//   ES2015:\n//     import 'tinymce/plugins/save'\nrequire('./plugin.js');", "export default require(\"./node_modules/tinymce/plugins/save/index.js\");"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,IAAC,YAAY;AACb,UAAI,OAAQ,WAAY;AACpB;AAEA,YAAI,SAAS,QAAQ,KAAK,MAAM,QAAQ;AAExC,YAAI,WAAW,QAAQ,KAAK,MAAM,QAAQ;AAE1C,YAAI,WAAW,QAAQ,KAAK,MAAM,QAAQ;AAE1C,YAAI,kBAAkB,SAAU,QAAQ;AACtC,iBAAO,OAAO,SAAS,wBAAwB;AAAA;AAEjD,YAAI,oBAAoB,SAAU,QAAQ;AACxC,iBAAO,CAAC,CAAC,OAAO,SAAS;AAAA;AAE3B,YAAI,sBAAsB,SAAU,QAAQ;AAC1C,iBAAO,CAAC,CAAC,OAAO,SAAS;AAAA;AAE3B,YAAI,WAAW;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA;AAGF,YAAI,sBAAsB,SAAU,QAAQ,SAAS;AACnD,iBAAO,oBAAoB,KAAK;AAAA,YAC9B,MAAM,OAAO,UAAU;AAAA,YACvB,MAAM;AAAA;AAAA;AAGV,YAAI,QAAO,SAAU,QAAQ;AAC3B,cAAI;AACJ,oBAAU,SAAS,IAAI,UAAU,OAAO,IAAI;AAC5C,cAAI,SAAS,gBAAgB,WAAW,CAAC,OAAO,WAAW;AACzD;AAAA;AAEF,iBAAO;AACP,cAAI,SAAS,kBAAkB,SAAS;AACtC,mBAAO,aAAa,uBAAuB;AAC3C,mBAAO;AACP;AAAA;AAEF,cAAI,SAAS;AACX,mBAAO,SAAS;AAChB,gBAAI,CAAC,QAAQ,YAAY,QAAQ,YAAY;AAC3C,kBAAI,OAAO,QAAQ,WAAW,YAAY;AACxC,wBAAQ;AAAA,qBACH;AACL,oCAAoB,QAAQ;AAAA;AAAA;AAGhC,mBAAO;AAAA,iBACF;AACL,gCAAoB,QAAQ;AAAA;AAAA;AAGhC,YAAI,SAAS,SAAU,QAAQ;AAC7B,cAAI,IAAI,SAAS,KAAK,OAAO;AAC7B,cAAI,SAAS,oBAAoB,SAAS;AACxC,mBAAO,aAAa,yBAAyB;AAC7C;AAAA;AAEF,iBAAO,WAAW;AAClB,iBAAO,YAAY;AACnB,iBAAO;AAAA;AAET,YAAI,UAAU;AAAA,UACZ,MAAM;AAAA,UACN;AAAA;AAGF,YAAI,WAAW,SAAU,QAAQ;AAC/B,iBAAO,WAAW,WAAW,WAAY;AACvC,oBAAQ,KAAK;AAAA;AAEf,iBAAO,WAAW,aAAa,WAAY;AACzC,oBAAQ,OAAO;AAAA;AAAA;AAGnB,YAAI,WAAW,EAAE;AAEjB,YAAI,cAAc,SAAU,QAAQ;AAClC,iBAAO,SAAU,GAAG;AAClB,gBAAI,OAAO,EAAE;AACb,mBAAO,GAAG,oBAAoB,WAAY;AACxC,mBAAK,SAAS,SAAS,gBAAgB,WAAW,CAAC,OAAO;AAAA;AAAA;AAAA;AAIhE,YAAI,aAAa,SAAU,QAAQ;AACjC,iBAAO,UAAU,QAAQ;AAAA,YACvB,MAAM;AAAA,YACN,MAAM;AAAA,YACN,KAAK;AAAA,YACL,UAAU;AAAA,YACV,cAAc,YAAY;AAAA;AAE5B,iBAAO,UAAU,UAAU;AAAA,YACzB,MAAM;AAAA,YACN,MAAM;AAAA,YACN,KAAK;AAAA,YACL,UAAU;AAAA,YACV,cAAc,YAAY;AAAA;AAE5B,iBAAO,YAAY,UAAU,IAAI;AAAA;AAEnC,YAAI,UAAU,EAAE,UAAU;AAE1B,eAAO,IAAI,QAAQ,SAAU,QAAQ;AACnC,kBAAQ,SAAS;AACjB,mBAAS,SAAS;AAAA;AAEpB,0BAAmB;AAAA;AAGnB,eAAO;AAAA;AAAA;AAAA;AAAA;;;ACpHX;AAAA;AAMA;AAAA;AAAA;;;ACNA,IAAO,qCAAQ;",
  "names": []
}
