{
  "version": 3,
  "sources": ["../tinymce/plugins/anchor/plugin.js", "../tinymce/plugins/anchor/index.js", "dep:tinymce_plugins_anchor_index"],
  "sourcesContent": ["(function () {\nvar anchor = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var isValidId = function (id) {\n      return /^[A-Za-z][A-Za-z0-9\\-:._]*$/.test(id);\n    };\n    var getId = function (editor) {\n      var selectedNode = editor.selection.getNode();\n      var isAnchor = selectedNode.tagName === 'A' && editor.dom.getAttrib(selectedNode, 'href') === '';\n      return isAnchor ? selectedNode.id || selectedNode.name : '';\n    };\n    var insert = function (editor, id) {\n      var selectedNode = editor.selection.getNode();\n      var isAnchor = selectedNode.tagName === 'A' && editor.dom.getAttrib(selectedNode, 'href') === '';\n      if (isAnchor) {\n        selectedNode.removeAttribute('name');\n        selectedNode.id = id;\n        editor.undoManager.add();\n      } else {\n        editor.focus();\n        editor.selection.collapse(true);\n        editor.execCommand('mceInsertContent', false, editor.dom.createHTML('a', { id: id }));\n      }\n    };\n    var Anchor = {\n      isValidId: isValidId,\n      getId: getId,\n      insert: insert\n    };\n\n    var insertAnchor = function (editor, newId) {\n      if (!Anchor.isValidId(newId)) {\n        editor.windowManager.alert('Id should start with a letter, followed only by letters, numbers, dashes, dots, colons or underscores.');\n        return true;\n      } else {\n        Anchor.insert(editor, newId);\n        return false;\n      }\n    };\n    var open = function (editor) {\n      var currentId = Anchor.getId(editor);\n      editor.windowManager.open({\n        title: 'Anchor',\n        body: {\n          type: 'textbox',\n          name: 'id',\n          size: 40,\n          label: 'Id',\n          value: currentId\n        },\n        onsubmit: function (e) {\n          var newId = e.data.id;\n          if (insertAnchor(editor, newId)) {\n            e.preventDefault();\n          }\n        }\n      });\n    };\n    var Dialog = { open: open };\n\n    var register = function (editor) {\n      editor.addCommand('mceAnchor', function () {\n        Dialog.open(editor);\n      });\n    };\n    var Commands = { register: register };\n\n    var isAnchorNode = function (node) {\n      return !node.attr('href') && (node.attr('id') || node.attr('name')) && !node.firstChild;\n    };\n    var setContentEditable = function (state) {\n      return function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n          if (isAnchorNode(nodes[i])) {\n            nodes[i].attr('contenteditable', state);\n          }\n        }\n      };\n    };\n    var setup = function (editor) {\n      editor.on('PreInit', function () {\n        editor.parser.addNodeFilter('a', setContentEditable('false'));\n        editor.serializer.addNodeFilter('a', setContentEditable(null));\n      });\n    };\n    var FilterContent = { setup: setup };\n\n    var register$1 = function (editor) {\n      editor.addButton('anchor', {\n        icon: 'anchor',\n        tooltip: 'Anchor',\n        cmd: 'mceAnchor',\n        stateSelector: 'a:not([href])'\n      });\n      editor.addMenuItem('anchor', {\n        icon: 'anchor',\n        text: 'Anchor',\n        context: 'insert',\n        cmd: 'mceAnchor'\n      });\n    };\n    var Buttons = { register: register$1 };\n\n    global.add('anchor', function (editor) {\n      FilterContent.setup(editor);\n      Commands.register(editor);\n      Buttons.register(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n", "// Exports the \"anchor\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/anchor')\n//   ES2015:\n//     import 'tinymce/plugins/anchor'\nrequire('./plugin.js');", "export default require(\"./node_modules/tinymce/plugins/anchor/index.js\");"],
  "mappings": "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",
  "names": []
}
