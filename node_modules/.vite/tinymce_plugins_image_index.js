import {
  __commonJS
} from "./chunk-BWTIIPT6.js";

// node_modules/tinymce/plugins/image/plugin.js
var require_plugin = __commonJS({
  "node_modules/tinymce/plugins/image/plugin.js"() {
    (function() {
      var image = function(domGlobals) {
        "use strict";
        var global = tinymce.util.Tools.resolve("tinymce.PluginManager");
        var hasDimensions = function(editor) {
          return editor.settings.image_dimensions === false ? false : true;
        };
        var hasAdvTab = function(editor) {
          return editor.settings.image_advtab === true ? true : false;
        };
        var getPrependUrl = function(editor) {
          return editor.getParam("image_prepend_url", "");
        };
        var getClassList = function(editor) {
          return editor.getParam("image_class_list");
        };
        var hasDescription = function(editor) {
          return editor.settings.image_description === false ? false : true;
        };
        var hasImageTitle = function(editor) {
          return editor.settings.image_title === true ? true : false;
        };
        var hasImageCaption = function(editor) {
          return editor.settings.image_caption === true ? true : false;
        };
        var getImageList = function(editor) {
          return editor.getParam("image_list", false);
        };
        var hasUploadUrl = function(editor) {
          return editor.getParam("images_upload_url", false);
        };
        var hasUploadHandler = function(editor) {
          return editor.getParam("images_upload_handler", false);
        };
        var getUploadUrl = function(editor) {
          return editor.getParam("images_upload_url");
        };
        var getUploadHandler = function(editor) {
          return editor.getParam("images_upload_handler");
        };
        var getUploadBasePath = function(editor) {
          return editor.getParam("images_upload_base_path");
        };
        var getUploadCredentials = function(editor) {
          return editor.getParam("images_upload_credentials");
        };
        var Settings = {
          hasDimensions,
          hasAdvTab,
          getPrependUrl,
          getClassList,
          hasDescription,
          hasImageTitle,
          hasImageCaption,
          getImageList,
          hasUploadUrl,
          hasUploadHandler,
          getUploadUrl,
          getUploadHandler,
          getUploadBasePath,
          getUploadCredentials
        };
        var Global = typeof domGlobals.window !== "undefined" ? domGlobals.window : Function("return this;")();
        var path = function(parts, scope) {
          var o = scope !== void 0 && scope !== null ? scope : Global;
          for (var i = 0; i < parts.length && o !== void 0 && o !== null; ++i) {
            o = o[parts[i]];
          }
          return o;
        };
        var resolve = function(p, scope) {
          var parts = p.split(".");
          return path(parts, scope);
        };
        var unsafe = function(name, scope) {
          return resolve(name, scope);
        };
        var getOrDie = function(name, scope) {
          var actual = unsafe(name, scope);
          if (actual === void 0 || actual === null) {
            throw new Error(name + " not available on this browser");
          }
          return actual;
        };
        var Global$1 = { getOrDie };
        function FileReader() {
          var f = Global$1.getOrDie("FileReader");
          return new f();
        }
        var global$1 = tinymce.util.Tools.resolve("tinymce.util.Promise");
        var global$2 = tinymce.util.Tools.resolve("tinymce.util.Tools");
        var global$3 = tinymce.util.Tools.resolve("tinymce.util.XHR");
        var parseIntAndGetMax = function(val1, val2) {
          return Math.max(parseInt(val1, 10), parseInt(val2, 10));
        };
        var getImageSize = function(url2, callback) {
          var img = domGlobals.document.createElement("img");
          function done(width, height) {
            if (img.parentNode) {
              img.parentNode.removeChild(img);
            }
            callback({
              width,
              height
            });
          }
          img.onload = function() {
            var width = parseIntAndGetMax(img.width, img.clientWidth);
            var height = parseIntAndGetMax(img.height, img.clientHeight);
            done(width, height);
          };
          img.onerror = function() {
            done(0, 0);
          };
          var style = img.style;
          style.visibility = "hidden";
          style.position = "fixed";
          style.bottom = style.left = "0px";
          style.width = style.height = "auto";
          domGlobals.document.body.appendChild(img);
          img.src = url2;
        };
        var buildListItems = function(inputList, itemCallback, startItems) {
          function appendItems(values, output) {
            output = output || [];
            global$2.each(values, function(item) {
              var menuItem = { text: item.text || item.title };
              if (item.menu) {
                menuItem.menu = appendItems(item.menu);
              } else {
                menuItem.value = item.value;
                itemCallback(menuItem);
              }
              output.push(menuItem);
            });
            return output;
          }
          return appendItems(inputList, startItems || []);
        };
        var removePixelSuffix = function(value) {
          if (value) {
            value = value.replace(/px$/, "");
          }
          return value;
        };
        var addPixelSuffix = function(value) {
          if (value.length > 0 && /^[0-9]+$/.test(value)) {
            value += "px";
          }
          return value;
        };
        var mergeMargins = function(css) {
          if (css.margin) {
            var splitMargin = css.margin.split(" ");
            switch (splitMargin.length) {
              case 1:
                css["margin-top"] = css["margin-top"] || splitMargin[0];
                css["margin-right"] = css["margin-right"] || splitMargin[0];
                css["margin-bottom"] = css["margin-bottom"] || splitMargin[0];
                css["margin-left"] = css["margin-left"] || splitMargin[0];
                break;
              case 2:
                css["margin-top"] = css["margin-top"] || splitMargin[0];
                css["margin-right"] = css["margin-right"] || splitMargin[1];
                css["margin-bottom"] = css["margin-bottom"] || splitMargin[0];
                css["margin-left"] = css["margin-left"] || splitMargin[1];
                break;
              case 3:
                css["margin-top"] = css["margin-top"] || splitMargin[0];
                css["margin-right"] = css["margin-right"] || splitMargin[1];
                css["margin-bottom"] = css["margin-bottom"] || splitMargin[2];
                css["margin-left"] = css["margin-left"] || splitMargin[1];
                break;
              case 4:
                css["margin-top"] = css["margin-top"] || splitMargin[0];
                css["margin-right"] = css["margin-right"] || splitMargin[1];
                css["margin-bottom"] = css["margin-bottom"] || splitMargin[2];
                css["margin-left"] = css["margin-left"] || splitMargin[3];
            }
            delete css.margin;
          }
          return css;
        };
        var createImageList = function(editor, callback) {
          var imageList = Settings.getImageList(editor);
          if (typeof imageList === "string") {
            global$3.send({
              url: imageList,
              success: function(text) {
                callback(JSON.parse(text));
              }
            });
          } else if (typeof imageList === "function") {
            imageList(callback);
          } else {
            callback(imageList);
          }
        };
        var waitLoadImage = function(editor, data, imgElm) {
          function selectImage() {
            imgElm.onload = imgElm.onerror = null;
            if (editor.selection) {
              editor.selection.select(imgElm);
              editor.nodeChanged();
            }
          }
          imgElm.onload = function() {
            if (!data.width && !data.height && Settings.hasDimensions(editor)) {
              editor.dom.setAttribs(imgElm, {
                width: imgElm.clientWidth,
                height: imgElm.clientHeight
              });
            }
            selectImage();
          };
          imgElm.onerror = selectImage;
        };
        var blobToDataUri = function(blob) {
          return new global$1(function(resolve2, reject) {
            var reader = FileReader();
            reader.onload = function() {
              resolve2(reader.result);
            };
            reader.onerror = function() {
              reject(reader.error.message);
            };
            reader.readAsDataURL(blob);
          });
        };
        var Utils = {
          getImageSize,
          buildListItems,
          removePixelSuffix,
          addPixelSuffix,
          mergeMargins,
          createImageList,
          waitLoadImage,
          blobToDataUri
        };
        var global$4 = tinymce.util.Tools.resolve("tinymce.dom.DOMUtils");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var shallow = function(old, nu) {
          return nu;
        };
        var baseMerge = function(merger) {
          return function() {
            var objects = new Array(arguments.length);
            for (var i = 0; i < objects.length; i++) {
              objects[i] = arguments[i];
            }
            if (objects.length === 0) {
              throw new Error("Can't merge zero objects");
            }
            var ret = {};
            for (var j = 0; j < objects.length; j++) {
              var curObject = objects[j];
              for (var key in curObject) {
                if (hasOwnProperty.call(curObject, key)) {
                  ret[key] = merger(ret[key], curObject[key]);
                }
              }
            }
            return ret;
          };
        };
        var merge = baseMerge(shallow);
        var DOM = global$4.DOM;
        var getHspace = function(image2) {
          if (image2.style.marginLeft && image2.style.marginRight && image2.style.marginLeft === image2.style.marginRight) {
            return Utils.removePixelSuffix(image2.style.marginLeft);
          } else {
            return "";
          }
        };
        var getVspace = function(image2) {
          if (image2.style.marginTop && image2.style.marginBottom && image2.style.marginTop === image2.style.marginBottom) {
            return Utils.removePixelSuffix(image2.style.marginTop);
          } else {
            return "";
          }
        };
        var getBorder = function(image2) {
          if (image2.style.borderWidth) {
            return Utils.removePixelSuffix(image2.style.borderWidth);
          } else {
            return "";
          }
        };
        var getAttrib = function(image2, name) {
          if (image2.hasAttribute(name)) {
            return image2.getAttribute(name);
          } else {
            return "";
          }
        };
        var getStyle = function(image2, name) {
          return image2.style[name] ? image2.style[name] : "";
        };
        var hasCaption = function(image2) {
          return image2.parentNode !== null && image2.parentNode.nodeName === "FIGURE";
        };
        var setAttrib = function(image2, name, value) {
          image2.setAttribute(name, value);
        };
        var wrapInFigure = function(image2) {
          var figureElm = DOM.create("figure", { class: "image" });
          DOM.insertAfter(figureElm, image2);
          figureElm.appendChild(image2);
          figureElm.appendChild(DOM.create("figcaption", { contentEditable: true }, "Caption"));
          figureElm.contentEditable = "false";
        };
        var removeFigure = function(image2) {
          var figureElm = image2.parentNode;
          DOM.insertAfter(image2, figureElm);
          DOM.remove(figureElm);
        };
        var toggleCaption = function(image2) {
          if (hasCaption(image2)) {
            removeFigure(image2);
          } else {
            wrapInFigure(image2);
          }
        };
        var normalizeStyle = function(image2, normalizeCss2) {
          var attrValue = image2.getAttribute("style");
          var value = normalizeCss2(attrValue !== null ? attrValue : "");
          if (value.length > 0) {
            image2.setAttribute("style", value);
            image2.setAttribute("data-mce-style", value);
          } else {
            image2.removeAttribute("style");
          }
        };
        var setSize = function(name, normalizeCss2) {
          return function(image2, name2, value) {
            if (image2.style[name2]) {
              image2.style[name2] = Utils.addPixelSuffix(value);
              normalizeStyle(image2, normalizeCss2);
            } else {
              setAttrib(image2, name2, value);
            }
          };
        };
        var getSize = function(image2, name) {
          if (image2.style[name]) {
            return Utils.removePixelSuffix(image2.style[name]);
          } else {
            return getAttrib(image2, name);
          }
        };
        var setHspace = function(image2, value) {
          var pxValue = Utils.addPixelSuffix(value);
          image2.style.marginLeft = pxValue;
          image2.style.marginRight = pxValue;
        };
        var setVspace = function(image2, value) {
          var pxValue = Utils.addPixelSuffix(value);
          image2.style.marginTop = pxValue;
          image2.style.marginBottom = pxValue;
        };
        var setBorder = function(image2, value) {
          var pxValue = Utils.addPixelSuffix(value);
          image2.style.borderWidth = pxValue;
        };
        var setBorderStyle = function(image2, value) {
          image2.style.borderStyle = value;
        };
        var getBorderStyle = function(image2) {
          return getStyle(image2, "borderStyle");
        };
        var isFigure = function(elm) {
          return elm.nodeName === "FIGURE";
        };
        var defaultData = function() {
          return {
            src: "",
            alt: "",
            title: "",
            width: "",
            height: "",
            class: "",
            style: "",
            caption: false,
            hspace: "",
            vspace: "",
            border: "",
            borderStyle: ""
          };
        };
        var getStyleValue = function(normalizeCss2, data) {
          var image2 = domGlobals.document.createElement("img");
          setAttrib(image2, "style", data.style);
          if (getHspace(image2) || data.hspace !== "") {
            setHspace(image2, data.hspace);
          }
          if (getVspace(image2) || data.vspace !== "") {
            setVspace(image2, data.vspace);
          }
          if (getBorder(image2) || data.border !== "") {
            setBorder(image2, data.border);
          }
          if (getBorderStyle(image2) || data.borderStyle !== "") {
            setBorderStyle(image2, data.borderStyle);
          }
          return normalizeCss2(image2.getAttribute("style"));
        };
        var create = function(normalizeCss2, data) {
          var image2 = domGlobals.document.createElement("img");
          write(normalizeCss2, merge(data, { caption: false }), image2);
          setAttrib(image2, "alt", data.alt);
          if (data.caption) {
            var figure = DOM.create("figure", { class: "image" });
            figure.appendChild(image2);
            figure.appendChild(DOM.create("figcaption", { contentEditable: true }, "Caption"));
            figure.contentEditable = "false";
            return figure;
          } else {
            return image2;
          }
        };
        var read = function(normalizeCss2, image2) {
          return {
            src: getAttrib(image2, "src"),
            alt: getAttrib(image2, "alt"),
            title: getAttrib(image2, "title"),
            width: getSize(image2, "width"),
            height: getSize(image2, "height"),
            class: getAttrib(image2, "class"),
            style: normalizeCss2(getAttrib(image2, "style")),
            caption: hasCaption(image2),
            hspace: getHspace(image2),
            vspace: getVspace(image2),
            border: getBorder(image2),
            borderStyle: getStyle(image2, "borderStyle")
          };
        };
        var updateProp = function(image2, oldData, newData, name, set) {
          if (newData[name] !== oldData[name]) {
            set(image2, name, newData[name]);
          }
        };
        var normalized = function(set, normalizeCss2) {
          return function(image2, name, value) {
            set(image2, value);
            normalizeStyle(image2, normalizeCss2);
          };
        };
        var write = function(normalizeCss2, newData, image2) {
          var oldData = read(normalizeCss2, image2);
          updateProp(image2, oldData, newData, "caption", function(image3, _name, _value) {
            return toggleCaption(image3);
          });
          updateProp(image2, oldData, newData, "src", setAttrib);
          updateProp(image2, oldData, newData, "alt", setAttrib);
          updateProp(image2, oldData, newData, "title", setAttrib);
          updateProp(image2, oldData, newData, "width", setSize("width", normalizeCss2));
          updateProp(image2, oldData, newData, "height", setSize("height", normalizeCss2));
          updateProp(image2, oldData, newData, "class", setAttrib);
          updateProp(image2, oldData, newData, "style", normalized(function(image3, value) {
            return setAttrib(image3, "style", value);
          }, normalizeCss2));
          updateProp(image2, oldData, newData, "hspace", normalized(setHspace, normalizeCss2));
          updateProp(image2, oldData, newData, "vspace", normalized(setVspace, normalizeCss2));
          updateProp(image2, oldData, newData, "border", normalized(setBorder, normalizeCss2));
          updateProp(image2, oldData, newData, "borderStyle", normalized(setBorderStyle, normalizeCss2));
        };
        var normalizeCss = function(editor, cssText) {
          var css = editor.dom.styles.parse(cssText);
          var mergedCss = Utils.mergeMargins(css);
          var compressed = editor.dom.styles.parse(editor.dom.styles.serialize(mergedCss));
          return editor.dom.styles.serialize(compressed);
        };
        var getSelectedImage = function(editor) {
          var imgElm = editor.selection.getNode();
          var figureElm = editor.dom.getParent(imgElm, "figure.image");
          if (figureElm) {
            return editor.dom.select("img", figureElm)[0];
          }
          if (imgElm && (imgElm.nodeName !== "IMG" || imgElm.getAttribute("data-mce-object") || imgElm.getAttribute("data-mce-placeholder"))) {
            return null;
          }
          return imgElm;
        };
        var splitTextBlock = function(editor, figure) {
          var dom = editor.dom;
          var textBlock = dom.getParent(figure.parentNode, function(node) {
            return editor.schema.getTextBlockElements()[node.nodeName];
          }, editor.getBody());
          if (textBlock) {
            return dom.split(textBlock, figure);
          } else {
            return figure;
          }
        };
        var readImageDataFromSelection = function(editor) {
          var image2 = getSelectedImage(editor);
          return image2 ? read(function(css) {
            return normalizeCss(editor, css);
          }, image2) : defaultData();
        };
        var insertImageAtCaret = function(editor, data) {
          var elm = create(function(css) {
            return normalizeCss(editor, css);
          }, data);
          editor.dom.setAttrib(elm, "data-mce-id", "__mcenew");
          editor.focus();
          editor.selection.setContent(elm.outerHTML);
          var insertedElm = editor.dom.select('*[data-mce-id="__mcenew"]')[0];
          editor.dom.setAttrib(insertedElm, "data-mce-id", null);
          if (isFigure(insertedElm)) {
            var figure = splitTextBlock(editor, insertedElm);
            editor.selection.select(figure);
          } else {
            editor.selection.select(insertedElm);
          }
        };
        var syncSrcAttr = function(editor, image2) {
          editor.dom.setAttrib(image2, "src", image2.getAttribute("src"));
        };
        var deleteImage = function(editor, image2) {
          if (image2) {
            var elm = editor.dom.is(image2.parentNode, "figure.image") ? image2.parentNode : image2;
            editor.dom.remove(elm);
            editor.focus();
            editor.nodeChanged();
            if (editor.dom.isEmpty(editor.getBody())) {
              editor.setContent("");
              editor.selection.setCursorLocation();
            }
          }
        };
        var writeImageDataToSelection = function(editor, data) {
          var image2 = getSelectedImage(editor);
          write(function(css) {
            return normalizeCss(editor, css);
          }, data, image2);
          syncSrcAttr(editor, image2);
          if (isFigure(image2.parentNode)) {
            var figure = image2.parentNode;
            splitTextBlock(editor, figure);
            editor.selection.select(image2.parentNode);
          } else {
            editor.selection.select(image2);
            Utils.waitLoadImage(editor, data, image2);
          }
        };
        var insertOrUpdateImage = function(editor, data) {
          var image2 = getSelectedImage(editor);
          if (image2) {
            if (data.src) {
              writeImageDataToSelection(editor, data);
            } else {
              deleteImage(editor, image2);
            }
          } else if (data.src) {
            insertImageAtCaret(editor, data);
          }
        };
        var updateVSpaceHSpaceBorder = function(editor) {
          return function(evt) {
            var dom = editor.dom;
            var rootControl = evt.control.rootControl;
            if (!Settings.hasAdvTab(editor)) {
              return;
            }
            var data = rootControl.toJSON();
            var css = dom.parseStyle(data.style);
            rootControl.find("#vspace").value("");
            rootControl.find("#hspace").value("");
            css = Utils.mergeMargins(css);
            if (css["margin-top"] && css["margin-bottom"] || css["margin-right"] && css["margin-left"]) {
              if (css["margin-top"] === css["margin-bottom"]) {
                rootControl.find("#vspace").value(Utils.removePixelSuffix(css["margin-top"]));
              } else {
                rootControl.find("#vspace").value("");
              }
              if (css["margin-right"] === css["margin-left"]) {
                rootControl.find("#hspace").value(Utils.removePixelSuffix(css["margin-right"]));
              } else {
                rootControl.find("#hspace").value("");
              }
            }
            if (css["border-width"]) {
              rootControl.find("#border").value(Utils.removePixelSuffix(css["border-width"]));
            } else {
              rootControl.find("#border").value("");
            }
            if (css["border-style"]) {
              rootControl.find("#borderStyle").value(css["border-style"]);
            } else {
              rootControl.find("#borderStyle").value("");
            }
            rootControl.find("#style").value(dom.serializeStyle(dom.parseStyle(dom.serializeStyle(css))));
          };
        };
        var updateStyle = function(editor, win) {
          win.find("#style").each(function(ctrl) {
            var value = getStyleValue(function(css) {
              return normalizeCss(editor, css);
            }, merge(defaultData(), win.toJSON()));
            ctrl.value(value);
          });
        };
        var makeTab = function(editor) {
          return {
            title: "Advanced",
            type: "form",
            pack: "start",
            items: [
              {
                label: "Style",
                name: "style",
                type: "textbox",
                onchange: updateVSpaceHSpaceBorder(editor)
              },
              {
                type: "form",
                layout: "grid",
                packV: "start",
                columns: 2,
                padding: 0,
                defaults: {
                  type: "textbox",
                  maxWidth: 50,
                  onchange: function(evt) {
                    updateStyle(editor, evt.control.rootControl);
                  }
                },
                items: [
                  {
                    label: "Vertical space",
                    name: "vspace"
                  },
                  {
                    label: "Border width",
                    name: "border"
                  },
                  {
                    label: "Horizontal space",
                    name: "hspace"
                  },
                  {
                    label: "Border style",
                    type: "listbox",
                    name: "borderStyle",
                    width: 90,
                    maxWidth: 90,
                    onselect: function(evt) {
                      updateStyle(editor, evt.control.rootControl);
                    },
                    values: [
                      {
                        text: "Select...",
                        value: ""
                      },
                      {
                        text: "Solid",
                        value: "solid"
                      },
                      {
                        text: "Dotted",
                        value: "dotted"
                      },
                      {
                        text: "Dashed",
                        value: "dashed"
                      },
                      {
                        text: "Double",
                        value: "double"
                      },
                      {
                        text: "Groove",
                        value: "groove"
                      },
                      {
                        text: "Ridge",
                        value: "ridge"
                      },
                      {
                        text: "Inset",
                        value: "inset"
                      },
                      {
                        text: "Outset",
                        value: "outset"
                      },
                      {
                        text: "None",
                        value: "none"
                      },
                      {
                        text: "Hidden",
                        value: "hidden"
                      }
                    ]
                  }
                ]
              }
            ]
          };
        };
        var AdvTab = { makeTab };
        var doSyncSize = function(widthCtrl, heightCtrl) {
          widthCtrl.state.set("oldVal", widthCtrl.value());
          heightCtrl.state.set("oldVal", heightCtrl.value());
        };
        var doSizeControls = function(win, f) {
          var widthCtrl = win.find("#width")[0];
          var heightCtrl = win.find("#height")[0];
          var constrained = win.find("#constrain")[0];
          if (widthCtrl && heightCtrl && constrained) {
            f(widthCtrl, heightCtrl, constrained.checked());
          }
        };
        var doUpdateSize = function(widthCtrl, heightCtrl, isContrained) {
          var oldWidth = widthCtrl.state.get("oldVal");
          var oldHeight = heightCtrl.state.get("oldVal");
          var newWidth = widthCtrl.value();
          var newHeight = heightCtrl.value();
          if (isContrained && oldWidth && oldHeight && newWidth && newHeight) {
            if (newWidth !== oldWidth) {
              newHeight = Math.round(newWidth / oldWidth * newHeight);
              if (!isNaN(newHeight)) {
                heightCtrl.value(newHeight);
              }
            } else {
              newWidth = Math.round(newHeight / oldHeight * newWidth);
              if (!isNaN(newWidth)) {
                widthCtrl.value(newWidth);
              }
            }
          }
          doSyncSize(widthCtrl, heightCtrl);
        };
        var syncSize = function(win) {
          doSizeControls(win, doSyncSize);
        };
        var updateSize = function(win) {
          doSizeControls(win, doUpdateSize);
        };
        var createUi = function() {
          var recalcSize = function(evt) {
            updateSize(evt.control.rootControl);
          };
          return {
            type: "container",
            label: "Dimensions",
            layout: "flex",
            align: "center",
            spacing: 5,
            items: [
              {
                name: "width",
                type: "textbox",
                maxLength: 5,
                size: 5,
                onchange: recalcSize,
                ariaLabel: "Width"
              },
              {
                type: "label",
                text: "x"
              },
              {
                name: "height",
                type: "textbox",
                maxLength: 5,
                size: 5,
                onchange: recalcSize,
                ariaLabel: "Height"
              },
              {
                name: "constrain",
                type: "checkbox",
                checked: true,
                text: "Constrain proportions"
              }
            ]
          };
        };
        var SizeManager = {
          createUi,
          syncSize,
          updateSize
        };
        var onSrcChange = function(evt, editor) {
          var srcURL, prependURL, absoluteURLPattern;
          var meta = evt.meta || {};
          var control = evt.control;
          var rootControl = control.rootControl;
          var imageListCtrl = rootControl.find("#image-list")[0];
          if (imageListCtrl) {
            imageListCtrl.value(editor.convertURL(control.value(), "src"));
          }
          global$2.each(meta, function(value, key) {
            rootControl.find("#" + key).value(value);
          });
          if (!meta.width && !meta.height) {
            srcURL = editor.convertURL(control.value(), "src");
            prependURL = Settings.getPrependUrl(editor);
            absoluteURLPattern = new RegExp("^(?:[a-z]+:)?//", "i");
            if (prependURL && !absoluteURLPattern.test(srcURL) && srcURL.substring(0, prependURL.length) !== prependURL) {
              srcURL = prependURL + srcURL;
            }
            control.value(srcURL);
            Utils.getImageSize(editor.documentBaseURI.toAbsolute(control.value()), function(data) {
              if (data.width && data.height && Settings.hasDimensions(editor)) {
                rootControl.find("#width").value(data.width);
                rootControl.find("#height").value(data.height);
                SizeManager.syncSize(rootControl);
              }
            });
          }
        };
        var onBeforeCall = function(evt) {
          evt.meta = evt.control.rootControl.toJSON();
        };
        var getGeneralItems = function(editor, imageListCtrl) {
          var generalFormItems = [
            {
              name: "src",
              type: "filepicker",
              filetype: "image",
              label: "Source",
              autofocus: true,
              onchange: function(evt) {
                onSrcChange(evt, editor);
              },
              onbeforecall: onBeforeCall
            },
            imageListCtrl
          ];
          if (Settings.hasDescription(editor)) {
            generalFormItems.push({
              name: "alt",
              type: "textbox",
              label: "Image description"
            });
          }
          if (Settings.hasImageTitle(editor)) {
            generalFormItems.push({
              name: "title",
              type: "textbox",
              label: "Image Title"
            });
          }
          if (Settings.hasDimensions(editor)) {
            generalFormItems.push(SizeManager.createUi());
          }
          if (Settings.getClassList(editor)) {
            generalFormItems.push({
              name: "class",
              type: "listbox",
              label: "Class",
              values: Utils.buildListItems(Settings.getClassList(editor), function(item) {
                if (item.value) {
                  item.textStyle = function() {
                    return editor.formatter.getCssText({
                      inline: "img",
                      classes: [item.value]
                    });
                  };
                }
              })
            });
          }
          if (Settings.hasImageCaption(editor)) {
            generalFormItems.push({
              name: "caption",
              type: "checkbox",
              label: "Caption"
            });
          }
          return generalFormItems;
        };
        var makeTab$1 = function(editor, imageListCtrl) {
          return {
            title: "General",
            type: "form",
            items: getGeneralItems(editor, imageListCtrl)
          };
        };
        var MainTab = {
          makeTab: makeTab$1,
          getGeneralItems
        };
        var url = function() {
          return Global$1.getOrDie("URL");
        };
        var createObjectURL = function(blob) {
          return url().createObjectURL(blob);
        };
        var revokeObjectURL = function(u) {
          url().revokeObjectURL(u);
        };
        var URL = {
          createObjectURL,
          revokeObjectURL
        };
        var global$5 = tinymce.util.Tools.resolve("tinymce.ui.Factory");
        function XMLHttpRequest() {
          var f = Global$1.getOrDie("XMLHttpRequest");
          return new f();
        }
        var noop = function() {
        };
        var pathJoin = function(path1, path2) {
          if (path1) {
            return path1.replace(/\/$/, "") + "/" + path2.replace(/^\//, "");
          }
          return path2;
        };
        function Uploader(settings) {
          var defaultHandler = function(blobInfo, success, failure, progress) {
            var xhr, formData;
            xhr = XMLHttpRequest();
            xhr.open("POST", settings.url);
            xhr.withCredentials = settings.credentials;
            xhr.upload.onprogress = function(e) {
              progress(e.loaded / e.total * 100);
            };
            xhr.onerror = function() {
              failure("Image upload failed due to a XHR Transport error. Code: " + xhr.status);
            };
            xhr.onload = function() {
              var json;
              if (xhr.status < 200 || xhr.status >= 300) {
                failure("HTTP Error: " + xhr.status);
                return;
              }
              json = JSON.parse(xhr.responseText);
              if (!json || typeof json.location !== "string") {
                failure("Invalid JSON: " + xhr.responseText);
                return;
              }
              success(pathJoin(settings.basePath, json.location));
            };
            formData = new domGlobals.FormData();
            formData.append("file", blobInfo.blob(), blobInfo.filename());
            xhr.send(formData);
          };
          var uploadBlob = function(blobInfo, handler) {
            return new global$1(function(resolve2, reject) {
              try {
                handler(blobInfo, resolve2, reject, noop);
              } catch (ex) {
                reject(ex.message);
              }
            });
          };
          var isDefaultHandler = function(handler) {
            return handler === defaultHandler;
          };
          var upload = function(blobInfo) {
            return !settings.url && isDefaultHandler(settings.handler) ? global$1.reject("Upload url missing from the settings.") : uploadBlob(blobInfo, settings.handler);
          };
          settings = global$2.extend({
            credentials: false,
            handler: defaultHandler
          }, settings);
          return { upload };
        }
        var onFileInput = function(editor) {
          return function(evt) {
            var Throbber = global$5.get("Throbber");
            var rootControl = evt.control.rootControl;
            var throbber = new Throbber(rootControl.getEl());
            var file = evt.control.value();
            var blobUri = URL.createObjectURL(file);
            var uploader = Uploader({
              url: Settings.getUploadUrl(editor),
              basePath: Settings.getUploadBasePath(editor),
              credentials: Settings.getUploadCredentials(editor),
              handler: Settings.getUploadHandler(editor)
            });
            var finalize = function() {
              throbber.hide();
              URL.revokeObjectURL(blobUri);
            };
            throbber.show();
            return Utils.blobToDataUri(file).then(function(dataUrl) {
              var blobInfo = editor.editorUpload.blobCache.create({
                blob: file,
                blobUri,
                name: file.name ? file.name.replace(/\.[^\.]+$/, "") : null,
                base64: dataUrl.split(",")[1]
              });
              return uploader.upload(blobInfo).then(function(url2) {
                var src = rootControl.find("#src");
                src.value(url2);
                rootControl.find("tabpanel")[0].activateTab(0);
                src.fire("change");
                finalize();
                return url2;
              });
            }).catch(function(err) {
              editor.windowManager.alert(err);
              finalize();
            });
          };
        };
        var acceptExts = ".jpg,.jpeg,.png,.gif";
        var makeTab$2 = function(editor) {
          return {
            title: "Upload",
            type: "form",
            layout: "flex",
            direction: "column",
            align: "stretch",
            padding: "20 20 20 20",
            items: [
              {
                type: "container",
                layout: "flex",
                direction: "column",
                align: "center",
                spacing: 10,
                items: [
                  {
                    text: "Browse for an image",
                    type: "browsebutton",
                    accept: acceptExts,
                    onchange: onFileInput(editor)
                  },
                  {
                    text: "OR",
                    type: "label"
                  }
                ]
              },
              {
                text: "Drop an image here",
                type: "dropzone",
                accept: acceptExts,
                height: 100,
                onchange: onFileInput(editor)
              }
            ]
          };
        };
        var UploadTab = { makeTab: makeTab$2 };
        function curry(fn) {
          var initialArgs = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            initialArgs[_i - 1] = arguments[_i];
          }
          return function() {
            var restArgs = [];
            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
              restArgs[_i2] = arguments[_i2];
            }
            var all = initialArgs.concat(restArgs);
            return fn.apply(null, all);
          };
        }
        var submitForm = function(editor, evt) {
          var win = evt.control.getRoot();
          SizeManager.updateSize(win);
          editor.undoManager.transact(function() {
            var data = merge(readImageDataFromSelection(editor), win.toJSON());
            insertOrUpdateImage(editor, data);
          });
          editor.editorUpload.uploadImagesAuto();
        };
        function Dialog(editor) {
          function showDialog(imageList) {
            var data = readImageDataFromSelection(editor);
            var win, imageListCtrl;
            if (imageList) {
              imageListCtrl = {
                type: "listbox",
                label: "Image list",
                name: "image-list",
                values: Utils.buildListItems(imageList, function(item) {
                  item.value = editor.convertURL(item.value || item.url, "src");
                }, [{
                  text: "None",
                  value: ""
                }]),
                value: data.src && editor.convertURL(data.src, "src"),
                onselect: function(e) {
                  var altCtrl = win.find("#alt");
                  if (!altCtrl.value() || e.lastControl && altCtrl.value() === e.lastControl.text()) {
                    altCtrl.value(e.control.text());
                  }
                  win.find("#src").value(e.control.value()).fire("change");
                },
                onPostRender: function() {
                  imageListCtrl = this;
                }
              };
            }
            if (Settings.hasAdvTab(editor) || Settings.hasUploadUrl(editor) || Settings.hasUploadHandler(editor)) {
              var body = [MainTab.makeTab(editor, imageListCtrl)];
              if (Settings.hasAdvTab(editor)) {
                body.push(AdvTab.makeTab(editor));
              }
              if (Settings.hasUploadUrl(editor) || Settings.hasUploadHandler(editor)) {
                body.push(UploadTab.makeTab(editor));
              }
              win = editor.windowManager.open({
                title: "Insert/edit image",
                data,
                bodyType: "tabpanel",
                body,
                onSubmit: curry(submitForm, editor)
              });
            } else {
              win = editor.windowManager.open({
                title: "Insert/edit image",
                data,
                body: MainTab.getGeneralItems(editor, imageListCtrl),
                onSubmit: curry(submitForm, editor)
              });
            }
            SizeManager.syncSize(win);
          }
          function open() {
            Utils.createImageList(editor, showDialog);
          }
          return { open };
        }
        var register = function(editor) {
          editor.addCommand("mceImage", Dialog(editor).open);
        };
        var Commands = { register };
        var hasImageClass = function(node) {
          var className = node.attr("class");
          return className && /\bimage\b/.test(className);
        };
        var toggleContentEditableState = function(state) {
          return function(nodes) {
            var i = nodes.length, node;
            var toggleContentEditable = function(node2) {
              node2.attr("contenteditable", state ? "true" : null);
            };
            while (i--) {
              node = nodes[i];
              if (hasImageClass(node)) {
                node.attr("contenteditable", state ? "false" : null);
                global$2.each(node.getAll("figcaption"), toggleContentEditable);
              }
            }
          };
        };
        var setup = function(editor) {
          editor.on("preInit", function() {
            editor.parser.addNodeFilter("figure", toggleContentEditableState(true));
            editor.serializer.addNodeFilter("figure", toggleContentEditableState(false));
          });
        };
        var FilterContent = { setup };
        var register$1 = function(editor) {
          editor.addButton("image", {
            icon: "image",
            tooltip: "Insert/edit image",
            onclick: Dialog(editor).open,
            stateSelector: "img:not([data-mce-object],[data-mce-placeholder]),figure.image"
          });
          editor.addMenuItem("image", {
            icon: "image",
            text: "Image",
            onclick: Dialog(editor).open,
            context: "insert",
            prependToContext: true
          });
        };
        var Buttons = { register: register$1 };
        global.add("image", function(editor) {
          FilterContent.setup(editor);
          Buttons.register(editor);
          Commands.register(editor);
        });
        function Plugin() {
        }
        return Plugin;
      }(window);
    })();
  }
});

// node_modules/tinymce/plugins/image/index.js
var require_image = __commonJS({
  "node_modules/tinymce/plugins/image/index.js"() {
    require_plugin();
  }
});

// dep:tinymce_plugins_image_index
var tinymce_plugins_image_index_default = require_image();
export {
  tinymce_plugins_image_index_default as default
};
//# sourceMappingURL=tinymce_plugins_image_index.js.map
