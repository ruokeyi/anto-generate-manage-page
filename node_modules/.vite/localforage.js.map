{
  "version": 3,
  "sources": ["../localforage/dist/localforage.js", "dep:localforage"],
  "sourcesContent": ["/*!\n    localForage -- Offline Storage, Improved\n    Version 1.10.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb || !idb.open) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\n        // Note: this creates issues with `window.fetch` polyfills and\n        // overrides; see:\n        // https://github.com/localForage/localForage/issues/856\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            var db = openreq.result;\n            db.onversionchange = function (e) {\n                // Triggered when the database is modified (e.g. adding an objectStore) or\n                // deleted (even when initiated by other sessions in different tabs).\n                // Closing the connection here prevents those operations from being blocked.\n                // If the database is accessed again later by this instance, the connection\n                // will be reopened or the database recreated as needed.\n                e.target.close();\n            };\n            resolve(db);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback returns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openKeyCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openKeyCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(req.error);\n                    };\n\n                    req.onblocked = function () {\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n", "export default require(\"./node_modules/localforage/dist/localforage.js\");"],
  "mappings": "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",
  "names": []
}
