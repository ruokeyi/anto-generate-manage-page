{
  "version": 3,
  "sources": ["../tinymce/plugins/noneditable/plugin.js", "../tinymce/plugins/noneditable/index.js", "dep:tinymce_plugins_noneditable_index"],
  "sourcesContent": ["(function () {\nvar noneditable = (function () {\n    'use strict';\n\n    var global = tinymce.util.Tools.resolve('tinymce.PluginManager');\n\n    var global$1 = tinymce.util.Tools.resolve('tinymce.util.Tools');\n\n    var getNonEditableClass = function (editor) {\n      return editor.getParam('noneditable_noneditable_class', 'mceNonEditable');\n    };\n    var getEditableClass = function (editor) {\n      return editor.getParam('noneditable_editable_class', 'mceEditable');\n    };\n    var getNonEditableRegExps = function (editor) {\n      var nonEditableRegExps = editor.getParam('noneditable_regexp', []);\n      if (nonEditableRegExps && nonEditableRegExps.constructor === RegExp) {\n        return [nonEditableRegExps];\n      } else {\n        return nonEditableRegExps;\n      }\n    };\n    var Settings = {\n      getNonEditableClass: getNonEditableClass,\n      getEditableClass: getEditableClass,\n      getNonEditableRegExps: getNonEditableRegExps\n    };\n\n    var hasClass = function (checkClassName) {\n      return function (node) {\n        return (' ' + node.attr('class') + ' ').indexOf(checkClassName) !== -1;\n      };\n    };\n    var replaceMatchWithSpan = function (editor, content, cls) {\n      return function (match) {\n        var args = arguments, index = args[args.length - 2];\n        var prevChar = index > 0 ? content.charAt(index - 1) : '';\n        if (prevChar === '\"') {\n          return match;\n        }\n        if (prevChar === '>') {\n          var findStartTagIndex = content.lastIndexOf('<', index);\n          if (findStartTagIndex !== -1) {\n            var tagHtml = content.substring(findStartTagIndex, index);\n            if (tagHtml.indexOf('contenteditable=\"false\"') !== -1) {\n              return match;\n            }\n          }\n        }\n        return '<span class=\"' + cls + '\" data-mce-content=\"' + editor.dom.encode(args[0]) + '\">' + editor.dom.encode(typeof args[1] === 'string' ? args[1] : args[0]) + '</span>';\n      };\n    };\n    var convertRegExpsToNonEditable = function (editor, nonEditableRegExps, e) {\n      var i = nonEditableRegExps.length, content = e.content;\n      if (e.format === 'raw') {\n        return;\n      }\n      while (i--) {\n        content = content.replace(nonEditableRegExps[i], replaceMatchWithSpan(editor, content, Settings.getNonEditableClass(editor)));\n      }\n      e.content = content;\n    };\n    var setup = function (editor) {\n      var editClass, nonEditClass;\n      var contentEditableAttrName = 'contenteditable';\n      editClass = ' ' + global$1.trim(Settings.getEditableClass(editor)) + ' ';\n      nonEditClass = ' ' + global$1.trim(Settings.getNonEditableClass(editor)) + ' ';\n      var hasEditClass = hasClass(editClass);\n      var hasNonEditClass = hasClass(nonEditClass);\n      var nonEditableRegExps = Settings.getNonEditableRegExps(editor);\n      editor.on('PreInit', function () {\n        if (nonEditableRegExps.length > 0) {\n          editor.on('BeforeSetContent', function (e) {\n            convertRegExpsToNonEditable(editor, nonEditableRegExps, e);\n          });\n        }\n        editor.parser.addAttributeFilter('class', function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (hasEditClass(node)) {\n              node.attr(contentEditableAttrName, 'true');\n            } else if (hasNonEditClass(node)) {\n              node.attr(contentEditableAttrName, 'false');\n            }\n          }\n        });\n        editor.serializer.addAttributeFilter(contentEditableAttrName, function (nodes) {\n          var i = nodes.length, node;\n          while (i--) {\n            node = nodes[i];\n            if (!hasEditClass(node) && !hasNonEditClass(node)) {\n              continue;\n            }\n            if (nonEditableRegExps.length > 0 && node.attr('data-mce-content')) {\n              node.name = '#text';\n              node.type = 3;\n              node.raw = true;\n              node.value = node.attr('data-mce-content');\n            } else {\n              node.attr(contentEditableAttrName, null);\n            }\n          }\n        });\n      });\n    };\n    var FilterContent = { setup: setup };\n\n    global.add('noneditable', function (editor) {\n      FilterContent.setup(editor);\n    });\n    function Plugin () {\n    }\n\n    return Plugin;\n\n}());\n})();\n", "// Exports the \"noneditable\" plugin for usage with module loaders\n// Usage:\n//   CommonJS:\n//     require('tinymce/plugins/noneditable')\n//   ES2015:\n//     import 'tinymce/plugins/noneditable'\nrequire('./plugin.js');", "export default require(\"./node_modules/tinymce/plugins/noneditable/index.js\");"],
  "mappings": "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",
  "names": []
}
